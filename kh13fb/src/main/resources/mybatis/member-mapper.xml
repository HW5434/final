<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="member">


	<!-- 목록 -->
	<select id="list" resultType="MemberDto">
		select * from member order by member_no asc
	</select>
	<select id="find" resultType="MemberDto">
		select * from member where member_no = #{memberNo}
	</select>
	
	<select id="selectFindId" resultType="MemberDto">
		select * from member where member_id = #{memberId}
	</select>
	
	
   <select id="getMyReservationList" resultType="hashmap">
   		<include refid="top-n-header"></include>
			SELECT  
				tb1.MEMBER_NO,
				tb1.RESERVATION_CONCERT_TITLE,
				TO_CHAR(tb1.RESERVATION_CONCERT_DATE, 'YYYY-MM-DD HH24:MI') AS RESERVATION_CONCERT_DATE,
				tb1.RESERVATION_PERSON_NAME,
				tb1.RESERVATION_STATUS,
				SUM(tb1.RESERVATION_PRICE) AS SUM_PRICE,
				TO_CHAR(tb1.RESERVATION_PAY_DATE, 'YYYY-MM-DD HH24:MI') AS PAY_DATE,
				COUNT(tb1.MEMBER_NO) AS RESERVATION_COUNT 
			FROM reservation tb1
			LEFT OUTER JOIN CONCERT_SCHEDULE tb2
			ON tb1.CONCERT_SCHEDULE_NO = tb2.CONCERT_SCHEDULE_NO
			LEFT OUTER JOIN SEAT tb3
			ON tb1.SEAT_NO = tb3.SEAT_NO
			LEFT OUTER JOIN MEMBER tb4
			ON tb1.MEMBER_NO = tb4.MEMBER_NO
			WHERE tb4.MEMBER_NO = #{memberNo}
			GROUP BY
				TO_CHAR(tb1.RESERVATION_CONCERT_DATE, 'YYYY-MM-DD HH24:MI'),
		        TO_CHAR(tb1.RESERVATION_PAY_DATE, 'YYYY-MM-DD HH24:MI'), 
		        tb1.MEMBER_NO,
		        tb1.RESERVATION_CONCERT_TITLE,
		        tb1.RESERVATION_PERSON_NAME,
		        tb1.RESERVATION_STATUS
		    ORDER BY PAY_DATE ASC
   		<include refid="top-n-footer"></include>
   </select>
   
   <select id="getReservationSeat" resultType="hashMap">
		SELECT
		CONCAT(CONCAT(tb1.SEAT_COL,'열'), CONCAT(tb1.SEAT_ROW,'번')) AS SEAT_CHOICE,
		tb2.MEMBER_NO,
		TO_CHAR(tb2.RESERVATION_PAY_DATE, 'YYYY-MM-DD HH24:MI') AS RESERVATION_PAY_DATE
		FROM seat tb1
		LEFT OUTER JOIN RESERVATION tb2
		ON tb1.SEAT_NO = TB2.SEAT_NO
		WHERE tb2.MEMBER_NO = #{memberNo}
		AND TO_CHAR(tb2.RESERVATION_PAY_DATE, 'YYYY-MM-DD HH24:MI') = #{payDate}
   </select>
   
   	<!-- Top N Query -->
	<!-- 상단 -->
	<sql id="top-n-header">
	    <if test="beginRow != null and endRow != null">
	    select * from (
	        select rownum rn, TMP.* from (
	    </if>
	</sql>
	
	<!-- 하단 -->
	<sql id="top-n-footer">
	    <if test="beginRow != null and endRow != null">
	        )TMP
	    ) where rn between #{beginRow} and #{endRow}
	    </if>
	</sql>
	
	<select id="count" resultType="int">
			select count(*) from (SELECT  
				tb1.MEMBER_NO,
				tb1.RESERVATION_CONCERT_TITLE,
				tb1.RESERVATION_CONCERT_DATE,
				tb1.RESERVATION_PERSON_NAME,
				tb1.RESERVATION_STATUS,
				SUM(tb1.RESERVATION_PRICE) AS SUM_PRICE,
				to_char(tb1.RESERVATION_PAY_DATE, 'YYYY-MM-DD HH24:MI') AS PAY_DATE,
				COUNT(tb1.MEMBER_NO) AS RESERVATION_COUNT 
			FROM reservation tb1
			LEFT OUTER JOIN CONCERT_SCHEDULE tb2
			ON tb1.CONCERT_SCHEDULE_NO = tb2.CONCERT_SCHEDULE_NO
			LEFT OUTER JOIN SEAT tb3
			ON tb1.SEAT_NO = tb3.SEAT_NO
			LEFT OUTER JOIN MEMBER tb4
			ON tb1.MEMBER_NO = tb4.MEMBER_NO
			WHERE tb4.MEMBER_NO = #{memberNo}
			GROUP BY
				TO_CHAR(tb1.RESERVATION_PAY_DATE, 'YYYY-MM-DD HH24:MI'), 
				tb1.MEMBER_NO,
				tb1.RESERVATION_CONCERT_TITLE,
				tb1.RESERVATION_CONCERT_DATE,
				tb1.RESERVATION_PERSON_NAME,
				tb1.RESERVATION_STATUS)
	</select>
	
	
	<!-- 등록 -->
   <select id="sequence" resultType="int">
      select member_seq.nextval from dual
   </select>

   <insert id="insert">
      insert into member(member_no, member_name, member_id, member_pw, member_contact, member_email, member_birth, member_post, member_address1, member_address2)
      values(member_seq.nextval, #{memberName}, #{memberId}, #{memberPw}, #{memberContact}, #{memberEmail}, #{memberBirth}, #{memberPost}, #{memberAddress1}, #{memberAddress2})
   </insert>
   
   <insert id="kakaoInsert">
      insert into member
      (
      	member_no, 
      	member_name, 
      	member_id, 
      	member_pw, 
      	member_contact, 
      	member_email, 
      	member_birth, 
      	member_post, 
      	member_address1, 
      	member_address2
      )
      values
      (
      	member_seq.nextval, 
      	#{name}, 
      	#{id}, 
      	'kakaoLoingPw', 
      	#{phoneNumber}, 
      	#{email}, 
      	#{birth}, 
      	'', 
      	'', 
      	''
      )
   </insert>
	
	<!-- 삭제 -->
	<delete id="delete">
		delete member where member_id = #{memberId}
	</delete>
	
	<!-- (회원)수정 -->
	<update id="edit">
		update member
		<set>
			<if test="memberName != null">member_name = #{memberName},</if>
			<if test="memberPw != null">member_pw = #{memberPw},</if>
			<if test="memberContact != null">member_contact = #{memberContact},</if>
			<if test="memberBirth != null">member_birth = #{memberBirth},</if>
			<if test="memberPost != null">member_post = #{memberPost},</if>
			<if test="memberAddress1 != null">member_address1 = #{memberAddress1},</if>
			<if test="memberAddress2 != null">member_address2 = #{memberAddress2},</if>
		</set>
		where member_no = #{memberNo}
	</update>
	
	<!-- (관리자->회원)수정 -->
	<update id="editMemberByAdmin">
		update member
		<set>
			<if test="memberName != null">member_name = #{memberName},</if>
			<if test="memberContact != null">member_contact = #{memberContact},</if>
			<if test="memberGrade != null">member_grade = #{memberGrade},</if>
			<if test="memberEmail != null">member_email = #{memberEmail},</if>
			<if test="memberBirth != null">member_birth = #{memberBirth},</if>
			<if test="memberPost != null">member_post = #{memberPost},</if>
			<if test="memberAddress1 != null">member_address1 = #{memberAddress1},</if>
			<if test="memberAddress2 != null">member_address2 = #{memberAddress2},</if>
			<if test="memberPoint != null">member_point = #{memberPoint},</if>
		</set>
		where member_no = #{memberNo}
	</update>
	
	<update id="editPassword" parameterType="hashmap">
		update member
		<set>
			member_pw = #{newPassword}
		</set>
		where member_id = #{memberId}
	</update>
	
	<!-- 아이디 중복체크 -->
	<select id="selectDoubleCheckId" resultType="string">
		select member_id from member where member_id = #{memberId}
	</select>
	
	<!-- 이메일 중복체크 -->
	<select id="selectDoubleCheckEmail" resultType="string">
		select member_email from member where member_email = #{memberEmail}
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="getFindId" resultType="MemberDto">
		select * from member
		where member_name = #{memberName}
		and member_Email = #{memberEmail}
	</select>
	
	<!-- 카카오아이디찾기 찾기 -->
	<select id="getKakaoFindId" resultType="MemberDto">
		select * from member
		where member_id = #{memberId}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="getFindPw" resultType="MemberDto">
		select * from member
		where member_id = #{memberId}
		and member_Email = #{memberEmail}
	</select>
	
	<!-- 임시비밀번호로 변경 -->
	<update id="editTempPassword">
		update member set member_pw = #{memberPw} where member_id = #{memberId}
	</update>
	
</mapper>









